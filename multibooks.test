<?php

class MultibooksFunctionalTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Multibooks functional tests',
      'description' => "Test the addition, deletion and rearrangement of nodes' secondary books.",  
      'group' => 'Multibooks',
    );
  }

  private $multibook_editor;
  private $blue_cover;
  private $blue_page1;
  private $blue_page2;
  private $green_cover;
  private $green_page1;
  private $lue_page2;

  public function setUp() {
    // Enable modules
    parent::setUp('node', 'book', 'multibooks');

    // Create and login with user
    $this->multibook_editor = $this->drupalCreateUser(array(
      'access content',
      'create page content',
      'edit secondary books',
    ));
    $this->drupalLogin($this->multibook_editor);

    // Set up a blue book 
    $this->blue_cover = $this->drupalCreateNode(array(
      'type'  => "page",
      'title' => "Blue book cover",
      'book'  => array('bid' => 'new'),
    ));
    $this->blue_page1 = $this->drupalCreateNode(array(
      'type'  => "page",
      'title' => "Blue page1",
      'book'  => array('bid' => $this->blue_cover->nid),
    ));
    $this->blue_page2 = $this->drupalCreateNode(array(
      'type'  => "page",
      'title' => "Blue page2",
      'book'  => array('bid' => $this->blue_cover->nid),
    ));

    // Set up a green book
    $this->green_cover = $this->drupalCreateNode(array(
      'type'  => "page",
      'title' => "Green book cover",
      'book'  => array('bid' => 'new'),
    ));
    $this->green_page1 = $this->drupalCreateNode(array(
      'type'  => "page",
      'title' => "Green page2",
      'book'  => array('bid' => $this->green_cover->nid),
    ));
    $this->green_page2 = $this->drupalCreateNode(array(
      'type'  => "page",
      'title' => "Green page2",
      'book'  => array('bid' => $this->green_cover->nid),
    ));
  }

  public function testPageToCover() {
    $this->blue_page1->book['secondary_book'] = $this->green_cover->nid;
    node_save($this->blue_page1);

    $this->drupalGet("node/{$this->green_cover->nid}");

    $this->assertLink($this->blue_page1->title);
  }

  public function testSaveAndLoad() {
    $this->blue_page1->book['secondary_book'] = $this->green_cover->nid;
    node_save($this->blue_page1);

    $updated_node = node_load($this->blue_page1->nid, NULL, FALSE);

    $this->assertEqual($this->green_cover->nid, $updated_node->book['secondary_book'], "Secondary parent loaded correctly.");
  }
}
